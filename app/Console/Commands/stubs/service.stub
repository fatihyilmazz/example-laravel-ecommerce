<?php

namespace App\Services;

use App\{{ model }};
use App\Repositories\{{ model }}Repository;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\Request;

class {{ model }}Service
{
    /**
     * @var {{ model }}Repository
     */
    protected ${{ modelVariable }}Repository;

    /**
     * {{ model }}Service constructor.
     * @param {{ model }}Repository ${{ modelVariable }}Repository
     */
    public function __construct({{ model }}Repository ${{ modelVariable }}Repository)
    {
        $this->{{ modelVariable }}Repository = ${{ modelVariable }}Repository;
    }

    /**
     * @param Request $request
     *
     * @return \Illuminate\Pagination\LengthAwarePaginator|\Illuminate\Support\Collection
     */
    public function get{{ modelPlural }}ByFilter(Request $request)
    {
        try {
            ${{ modelVariable }} = new {{ model }}();

            return $this->{{ modelVariable }}Repository->get{{ modelPlural }}ByFilter($request, ${{ modelVariable }});
        } catch (\Throwable $exception) {
            Log::error(sprintf('[%s][%s] %s', __CLASS__, __FUNCTION__, $exception));
        }

        return null;
    }

    /**
     * @param array $data
     * @return {{ model }}|\Illuminate\Database\Eloquent\Model|null
     */
    public function create(array $data): Model
    {
        try {
            return $this->{{ modelVariable }}Repository->create($data);
        } catch (\Throwable $exception) {
            Log::error(sprintf('[%s][%s] %s', __CLASS__, __FUNCTION__, $exception));
        }

        return null;
    }

    /**
     * @param array $data
     * @param int ${{ modelVariable }}Id
     * @return bool|null
     */
    public function update(array $data, int ${{ modelVariable }}Id): ?bool
    {
        try {
            return $this->{{ modelVariable }}Repository->update($data, ${{ modelVariable }}Id);
        } catch (\Throwable $exception) {
            Log::error(sprintf('[%s][%s] %s', __CLASS__, __FUNCTION__, $exception));
        }

        return null;
    }

    /**
     * @param int ${{ modelVariable }}Id
     * @return bool|null
     */
    public function destroy(int ${{ modelVariable }}Id): ?bool
    {
        try {
            return $this->{{ modelVariable }}Repository->destroy(${{ modelVariable }}Id);
        } catch (\Throwable $exception) {
            Log::error(sprintf('[%s][%s] %s', __CLASS__, __FUNCTION__, $exception));
        }

        return null;
    }
}
